{"timestamp":"2025-08-19T16:10:51.505663","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-19T16:10:51.506045","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/fact_production.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-19T16:10:51.534361Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.534485Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.534597Z","level":"info","event":"Current task name:load_data_to_neon","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.534671Z","level":"info","event":"Dag name:etl_fact_production_dag","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.535409Z","level":"info","event":"Starting data loading...","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.541266","level":"warning","event":"/opt/airflow/dags/fact_production.py:118: FutureWarning: Passing literal json to 'read_json' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n  df_transformed = pd.read_json(json_data, orient='records')\n","logger":"py.warnings"}
{"timestamp":"2025-08-19T16:10:51.545256Z","level":"info","event":"Data received for loading: 63 rows","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.546304","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-19T16:10:51.549358","level":"info","event":"Connection Retrieved 'bdd_neon_recette'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-19T16:10:51.945027Z","level":"info","event":"Successfully loaded 63 rows into fact_production with UPSERT","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.945801","level":"info","event":"Done. Returned value was: Successfully loaded 63 rows","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-19T16:10:51.946282","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0198c318-ed47-78c4-aed8-4c24817dd68a'), task_id='load_data_to_neon', dag_id='etl_fact_production_dag', run_id='scheduled__2025-08-19T16:00:00+00:00', try_number=1, map_index=-1, hostname='b751e2694e77', context_carrier={}, task=<Task(PythonOperator): load_data_to_neon>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 8, 19, 16, 10, 51, 258472, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/etl_fact_production_dag/runs/scheduled__2025-08-19T16%3A00%3A00%2B00%3A00/tasks/load_data_to_neon?try_number=1')","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.965922Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.966069Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-19T16:10:51.966200Z","level":"info","event":"Task operator:<Task(PythonOperator): load_data_to_neon>","chan":"stdout","logger":"task"}
